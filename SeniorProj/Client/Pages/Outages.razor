@inject IJSRuntime JsRuntime
@implements IAsyncDisposable 
@using SeniorProj.Shared
@inject HttpClient Http

@page "/outages"
<PageTitle>Outages</PageTitle>
<style>
    h1{
     text-align:  center;
    }
    
    #map 
    {
     z-index: 99;
    }
    
    .outages{
        justify-content: center;
        justify-items: center;
        margin-top: 20px;
        
    }
    
    .outage-info{
       display: grid;
       justify-content: center;
       grid-template-rows:auto;
       grid-auto-columns: auto;
       
          
    }
    
    .repair-info{
        display: flex;
        gap: 60px;
        justify-content: right;
    
    }
    
    
</style>
<h1>Outages</h1>

<div id = "map" style ="width:50vw; height: 65vh; position: relative; min-width:400px;
margin: auto; ">  </div>
@if (posts != null)
{
    <div class="outages">
         @foreach (var outage in posts)
            {
                <h3>@outage.CompanyName</h3>
                <h5><label>Affected Area:</label> @outage.OutageZIP</h5>
                <div class = "outage-info">
                    <h4 id = "description">@outage.Description</h4>
                </div>
                <div class = "repair-info">
                    <a><label>Repair date:</label> @outage.RepairDate</a>
                    <a><label>Repair Time:</label> @outage.RepairTime</a>
                </div>
                    
                    
                
            }
    </div>
   
    
}
 







@code{
    private IJSObjectReference? module;
    private string? result;
    private Outage[]? posts;
    protected override async Task OnInitializedAsync()
    {
        posts = await Http.GetFromJsonAsync<Outage[]>("User/Outages");
    }
    protected override async void OnAfterRender(bool firstRender)
    {
       if(firstRender)
       {
           var client = new HttpClient();
           //var raw = await client.GetStringAsync("https://localhost:71772/geojson.json");
          // raw = raw.Replace('\n', ' ');
           module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./LoadMap.js");
           if (module != null)
           {
               result = await module.InvokeAsync<string>("load_map");
           }
       }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

}